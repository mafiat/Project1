
"""
This script loads environment variables and imports necessary libraries for making API requests.

Modules:
    json: Provides functions for working with JSON data.
    requests: Allows sending HTTP requests.
    dotenv: Loads environment variables from a .env file.
    os: Provides functions for interacting with the operating system.

Environment Variables:
    TS_CLIENT_ID: Client ID for a third-party service.
    TS_CLIENT_SECRET: Client secret for a third-party service.
    TS_REFRESH_TOKEN: Refresh token for a third-party service.
"""

import json
import requests
from dotenv import load_dotenv
import os

load_dotenv()

CLIENT_ID = os.getenv("TS_CLIENT_ID")
CLIENT_SECRET = os.getenv("TS_CLIENT_SECRET")
REFRESH_TOKEN = os.getenv("TS_REFRESH_TOKEN")


# Function to get access token
def get_access_token():
    url = "https://signin.tradestation.com/oauth/token"

    payload=f'grant_type=refresh_token&client_id={CLIENT_ID}&client_secret={CLIENT_SECRET}&refresh_token={REFRESH_TOKEN}'
    headers = {
      'Content-Type': 'application/x-www-form-urlencoded'
    }

    response = requests.request("POST", url, headers=headers, data=payload)
    response_data = response.json()
    return response_data['access_token']


# Create a List of the Stocks

stocks = ['NVDA', 'MSFT', 'GOOGL', 'AMZN', 'GOOGL', 'MSFT', 'FB', 'INTC', 'CSCO', 'ADBE']



# Get the stock data
# Generate Access Token

access_token = get_access_token() # get a new access token
headers = {'Authorization': f'Bearer {access_token}' }


# Define the Base URLS

url = "https://sim-api.tradestation.com/v3/marketdata/barcharts/NVDA?barsback=10000"


# Get the Stock Data

response = requests.request("GET", url, headers=headers)
json_data = response.json()
print(json.dumps(json_data, indent=4, sort_keys=False))


# Create the Data Frame

import pandas as pd
df = pd.DataFrame(json_data['Bars'])

df.head(10)



# Data Preprocessing

data = df[['TimeStamp','High', 'Low', 'Open', 'Close', 'TotalVolume']]
data.loc[:,'TimeStamp'] = pd.to_datetime(data['TimeStamp'])
data.loc[:,'High'] = data['High'].astype(float)
data.loc[:,'Low'] = data['Low'].astype(float)
data.loc[:,'Open'] = data['Open'].astype(float)
data.loc[:,'Close'] = data['Close'].astype(float)
data.loc[:,'TotalVolume'] = data['TotalVolume'].astype(float)
data = data.set_index('TimeStamp')

data.rename(columns={'TotalVolume': 'Volume'}, inplace=True)



# Plot the Data

data.plot(y='Close', title='NVDA Close Price', figsize=(10,5))

data.head(10)

